<?xml version="1.0" encoding="UTF-8" ?>

<configuration>
    <!-- 指定日志文件路径（与当前程序jar包同一目录下） -->
    <property name="LOG_HOME" value="../logs"/>
    <property name="MODULE_NAME" value="self-help"/>
    <property name="BASE_PATTERN"
              value="[%date{yyyy-MM-dd HH:mm:ss.SSS}] %-5level[%thread] traceid=%X{trace_id} %logger{56}.%method:%L -%msg%n"/>
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${BASE_PATTERN}</pattern>
            <charset class="java.nio.charset.Charset">UTF-8</charset>
        </encoder>
    </appender>

    <appender name="fileLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 设置日志输出格式 -->
        <encoder>
            <pattern>${BASE_PATTERN}</pattern>
            <!-- 设置编码格式，以防中文乱码 -->
            <charset class="java.nio.charset.Charset">UTF-8</charset>
        </encoder>
        <!-- 当前日这个类型的所有日志。当日志超出下面设置的大小会分割压缩放到info文件夹下，但info.log不改变，直到第二天才会重置 -->
        <File>${LOG_HOME}/biz.log</File>
        <!--滚动策略，靠这个来生成不同文件。  TimeBasedRollingPolicy 不能设置文件大小，所以用SizeAndTimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志存放路径。注意路径后面如果加.zip等压缩文件类型结尾的，超过单个文件最大值进行分割时会自动对文件进行压缩-->
            <fileNamePattern>${LOG_HOME}/biz.%d{yyyyMMdd}.log</fileNamePattern>
            <!-- 日志文件保留天数，超过这个则删除旧的日志 -->
            <MaxHistory>30</MaxHistory>
            <!-- 日志保留最大的值，超过这个则删除旧的日志 -->
            <totalSizeCap>2GB</totalSizeCap>
            <!-- 设置这个启动时MaxHistory才生效，才会删日志 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>


    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 设置日志输出格式 -->
        <encoder>
            <pattern>${BASE_PATTERN}</pattern>
            <!-- 设置编码格式，以防中文乱码 -->
            <charset class="java.nio.charset.Charset">UTF-8</charset>
        </encoder>
        <!-- 当前日这个类型的所有日志。当日志超出下面设置的大小会分割压缩放到info文件夹下，但info.log不改变，直到第二天才会重置 -->
        <File>${LOG_HOME}/biz-info.log</File>
        <!--滚动策略，靠这个来生成不同文件。  TimeBasedRollingPolicy 不能设置文件大小，所以用SizeAndTimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志存放路径。注意路径后面如果加.zip等压缩文件类型结尾的，超过单个文件最大值进行分割时会自动对文件进行压缩-->
            <fileNamePattern>${LOG_HOME}/biz-info.%d{yyyyMMdd}.log</fileNamePattern>
            <!-- 日志文件保留天数，超过这个则删除旧的日志 -->
            <MaxHistory>30</MaxHistory>
            <!-- 日志保留最大的值，超过这个则删除旧的日志 -->
            <totalSizeCap>2GB</totalSizeCap>
            <!-- 设置这个启动时MaxHistory才生效，才会删日志 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>

    <appender name="fileWarnLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMatch>DENY</onMatch>
        </filter>
        <encoder>
            <pattern>
                ${BASE_PATTERN}
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>${LOG_HOME}/biz.warn.%d{yyyyMMdd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>

    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>
                ${BASE_PATTERN}
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>${LOG_HOME}/biz.error.%d{yyyyMMdd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileLog"/>
        <!--        <appender-ref ref="fileInfoLog"/>-->

        <appender-ref ref="fileWarnLog"/>
        <appender-ref ref="fileErrorLog"/>
    </root>
</configuration>